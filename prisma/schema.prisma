// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id               Int                @id @default(autoincrement())
  name             String
  ExerciseBaseData ExerciseBaseData[]
}

model DayOfWeek {
  id          Int    @id @default(autoincrement())
  day_of_week String
}

model Equipment {
  id               Int                @id @default(autoincrement())
  name             String
  ExerciseBaseData ExerciseBaseData[]
}

model Language {
  id         Int        @id @default(autoincrement())
  full_name  String
  short_name String
  Exercise   Exercise[]
}

model Licence {
  id               Int                @id @default(autoincrement())
  full_name        String
  short_name       String
  url              String
  Exercise         Exercise[]
  ExerciseBaseData ExerciseBaseData[]
}

model Exercise {
  id                    Int                     @id @default(autoincrement())
  licence               Licence                 @relation(fields: [licenceId], references: [id])
  licenceId             Int
  license_author        String
  name                  String
  name_original         String
  status                String
  description           String
  creation_date         DateTime
  language              Language                @relation(fields: [languageId], references: [id])
  languageId            Int
  uuid                  String                  @db.Uuid
  exercise_base         ExerciseBaseData        @relation(fields: [exerciseBaseDataId], references: [id])
  exerciseBaseDataId    Int
  WorkoutPiece          WorkoutPiece[]
  CompletedWorkoutPiece CompletedWorkoutPiece[]
}

model Muscles {
  id               Int                @id @default(autoincrement())
  is_front         Boolean            @default(true)
  name             String
  ExerciseBaseData ExerciseBaseData[]
}

model ExerciseBaseData {
  id             Int         @id @default(autoincrement())
  license        Licence     @relation(fields: [licenceId], references: [id])
  licenceId      Int
  license_author String
  status         String
  uuid           String
  category       Category    @relation(fields: [categoryId], references: [id])
  categoryId     Int
  variations     String?
  muscles        Muscles[]
  equipment      Equipment[]
  Exercise       Exercise[]
}

model RepetitionUnits {
  id                    Int                     @id @default(autoincrement())
  name                  String
  WorkoutPiece          WorkoutPiece[]
  CompletedWorkoutPiece CompletedWorkoutPiece[]
}

model WeightUnits {
  id                    Int                     @id @default(autoincrement())
  name                  String
  WorkoutPiece          WorkoutPiece[]
  CompletedWorkoutPiece CompletedWorkoutPiece[]
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model CompletedWorkoutPiece {
  id                Int             @id @default(autoincrement())
  completed_on      DateTime        @default(now())
  exercise          Exercise        @relation(fields: [exerciseId], references: [id])
  reps              RepetitionUnits @relation(fields: [repetitionUnitsId], references: [id])
  weight            WeightUnits     @relation(fields: [weightUnitsId], references: [id])
  exerciseId        Int
  repetitionUnitsId Int
  weightUnitsId     Int
  Workout           Workout         @relation(fields: [workoutId], references: [id])
  workoutId         Int
}

model WorkoutPiece {
  id                Int              @id @default(autoincrement())
  exercise          Exercise         @relation(fields: [exerciseId], references: [id])
  reps              RepetitionUnits  @relation(fields: [repetitionUnitsId], references: [id])
  weight            WeightUnits      @relation(fields: [weightUnitsId], references: [id])
  exerciseId        Int
  repetitionUnitsId Int
  weightUnitsId     Int
  WorkoutTemplate   WorkoutTemplate? @relation(fields: [workoutTemplateId], references: [id])
  workoutTemplateId Int?
  Workout           Workout?         @relation(fields: [workoutId], references: [id])
  workoutId         Int?
}

// model CompletedWorkout{

// }

model Workout {
  id                    Int                     @id @default(autoincrement())
  user                  User                    @relation(fields: [userId], references: [id])
  userId                Int
  pieces                WorkoutPiece[]
  CompletedWorkoutPiece CompletedWorkoutPiece[]
}

model WorkoutTemplate {
  id     Int            @id @default(autoincrement())
  name   String
  user   User           @relation(fields: [userId], references: [id])
  userId Int
  pieces WorkoutPiece[]
}

model User {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  auth_string     String
  firstname       String
  lastname        String
  age             Int?
  posts           Post[]
  profile         Profile?
  WorkoutTemplate WorkoutTemplate[]
  Workout         Workout[]
}
